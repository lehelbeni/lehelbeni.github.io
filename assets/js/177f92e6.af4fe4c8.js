"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[576],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,u=p["".concat(l,".").concat(m)]||p[m]||g[m]||i;return n?r.createElement(u,o(o({ref:t},d),{},{components:n})):r.createElement(u,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:1},o="GitHub Cheat sheet",s={unversionedId:"webdev/DevOps/git",id:"webdev/DevOps/git",title:"GitHub Cheat sheet",description:"Initialising a new .git directory",source:"@site/docs/webdev/DevOps/01_git.md",sourceDirName:"webdev/DevOps",slug:"/webdev/DevOps/git",permalink:"/docs/webdev/DevOps/git",draft:!1,editUrl:"https://github.com/lehelbeni/lehelbeni.github.io/tree/main/docs/webdev/DevOps/01_git.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"webdevSidebar",previous:{title:"DevOps",permalink:"/docs/category/devops"},next:{title:"How to deploy your websites",permalink:"/docs/webdev/DevOps/deploying-your-site"}},l={},c=[{value:"Initialising a new .git directory",id:"initialising-a-new-git-directory",level:2},{value:"\u2026or create a new repository on the command line",id:"or-create-a-new-repository-on-the-command-line",level:3},{value:"\u2026or create a new repository on the command line",id:"or-create-a-new-repository-on-the-command-line-1",level:3},{value:"Share and Update",id:"share-and-update",level:2},{value:"Setup and Init",id:"setup-and-init",level:2},{value:"Stage and Snapshot",id:"stage-and-snapshot",level:2},{value:"Branch and Merge",id:"branch-and-merge",level:2},{value:"Setup",id:"setup",level:2}],d={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"github-cheat-sheet"},"GitHub Cheat sheet"),(0,a.kt)("h2",{id:"initialising-a-new-git-directory"},"Initialising a new .git directory"),(0,a.kt)("h3",{id:"or-create-a-new-repository-on-the-command-line"},"\u2026or create a new repository on the command line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "# Title Page" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit branch -M main\ngit remote add origin https://github.com/lehelbeni/<reponame.git>\ngit push -u origin main\n')),(0,a.kt)("h3",{id:"or-create-a-new-repository-on-the-command-line-1"},"\u2026or create a new repository on the command line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git remote add origin https://github.com/lehelbeni/new.git\ngit branch -M main\ngit push -u origin main\n")),(0,a.kt)("h2",{id:"share-and-update"},"Share and Update"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# add a git URL as an alias\ngit remote add [alias] [url]\n\n# fetch down all the branches from that Git remote\ngit fetch [alias]\n\n# merge a remote branch into your current branch to bring it up to date\ngit merge [alias]/[branch]\n\n# Transmit local branch commits to the remote repository branch\ngit push [alias] [branch]\n\n# fetch and merge any commits from the tracking remote branch\ngit pull\n")),(0,a.kt)("h2",{id:"setup-and-init"},"Setup and Init"),(0,a.kt)("p",null,"Configuring information, initializing and cloning repositories"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git init\ngit clone [url]\n")),(0,a.kt)("h2",{id:"stage-and-snapshot"},"Stage and Snapshot"),(0,a.kt)("p",null,"Working with snapshots and the Git staging area."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# show modified files in working directory, staged for your next commit\ngit status\n# add a file as it looks now to your next commit (stage)\ngit add [file]\n# unstage a file while retaining the changes in working directory\ngit reset [file] \n# diff of what is changed but not staged\ngit diff\n# commit your staged content as a new commit snapshot\ngit commit -m "[descriptive message]"\n')),(0,a.kt)("h2",{id:"branch-and-merge"},"Branch and Merge"),(0,a.kt)("p",null,"Isolating work in branches, changing context, and integrating changes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# list your branches. a * will appear next to the currently active branch\ngit branch\n\n# create a new branch at the current commit\ngit branch [branch-name]\n\n# switch to another branch and check it out into your working directory\ngit checkout\n\n# merge the specified branch\u2019s history into the current one\ngit merge [branch]\n\n# show all commits in the current branch\u2019s history\ngit log\n")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Configuring user information used across all local repositories"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# set a name that is identifiable for credit when review version history\ngit config --global user.name \u201c[firstname lastname]\u201d\n\n# set an email address that will be associated with each history marker\ngit config --global user.email \u201c[valid-email]\u201d\n\n# set automatic command line coloring for Git for easy reviewing\ngit config --global color.ui auto\n")))}g.isMDXComponent=!0}}]);